knitr::opts_chunk$set(echo = TRUE, tidy=T)
read.csv("../code/ch.4/input/data-salary.txt")
data-salary <- read.csv("../code/ch.4/input/data-salary.txt")
salary <- read.csv("../code/ch.4/input/data-salary.txt")
View(data)
salary <- read.csv("../code/ch.4/input/data-salary.txt")
plot(salary)
ggplot(aes(x=X, y=y))
library(ggplot2)
ggplot(aes(x=X, y=Y))
library(tidyverse)
salary %>% ggplot(aes(x=X, y=Y))
salary %>% ggplot(aes(x=X, y=Y)) + geom_point()
res_lm(Y~X, data=salary)
res_lm = lm(Y~X, data=salary)
res_lm
library(rstan)
fit = stan(file = "./source/model4-5.stan", data=data, seed=1234)
data = list(N = nrow(salary), X = salary$X, Y = salary$Y)
fit = stan(file = "./source/model4-5.stan", data=data, seed=1234)
fit
needs(ggmcmc)
library(ggmcmc)
plot='traceplot)
ggmcmc(ggs(fit, inc_warmup = T, stan_include_auxiliar = T),
ggmcmc(ggs(fit, inc_warmup = T, stan_include_auxiliar = T),
plot='traceplot')
ggmcmc(ggs(fit, inc_warmup = T, stan_include_auxiliar = T),
plot='traceplot')
ggmcmc(ggs(fit, inc_warmup = T, stan_include_auxiliar = T),
plot='traceplot')
ggmcmc(ggs(fit, inc_warmup = T, stan_include_auxiliar = T),
file = "./output.fit-traceplot.pdf", plot='traceplot')
ggmcmc(ggs(fit, inc_warmup = T, stan_include_auxiliar = T),
file = "./output/fit-traceplot.pdf", plot='traceplot')
ggmcmc(ggs(fit), ggs(fit))
ggmcmc(ggs(fit))
ggmcmc(ggs(fit), file = "./output/fit-ggmcmc.pdf")
data = list(N = nrow(salary), X = salary$X, Y = salary$Y)
fit = stan(file = "./source/model4-5.stan", data=data, seed=1234)
fit
knitr::opts_chunk$set(echo = TRUE, tidy=T)
data = list(N = nrow(salary), X = salary$X, Y = salary$Y)
fit = stan(file = "./source/model4-5.stan", data=data, seed=1234)
library(tidyverse)
library(ggplot2)
library(rstan)
library(ggmcmc)
res_lm = lm(Y~X, data=salary)
res_lm
data = list(N = nrow(salary), X = salary$X, Y = salary$Y)
fit = stan(file = "./source/model4-5.stan", data=data, seed=1234)
data = list(N = nrow(salary), X = salary$X, Y = salary$Y)
fit = stan(file = "../source/model4-5.stan", data=data, seed=1234)
fit
ggmcmc(ggs(fit, inc_warmup = T, stan_include_auxiliar = T),
file = "./output/fit-traceplot.pdf", plot='traceplot')
ggmcmc(ggs(fit, inc_warmup = T, stan_include_auxiliar = T),
file = "../output/fit-traceplot.pdf", plot='traceplot')
ggmcmc(ggs(fit), file = "./output/fit-ggmcmc.pdf")
ggmcmc(ggs(fit), file = "../output/fit-ggmcmc.pdf")
fit
stanmodel = stan_model(file="../souce/model4-5.stan")
stanmodel = stan_model(file="./souce/model4-5.stan")
stanmodel = stan_model(file="../souce/model4-5.stan")
stanmodel = stan_model(file="./model4-5.stan")
fit_option = sampling(
stanmodel,
data = data,
pars = c("b", "sigma"),
init = function(){
list(a = runif(1, -10, 10),
b = runif(1, 0, 10),
sigma = 10)
},
seed = 123,
chains = 3, iter = 1000, warmup = 200, thin = 2
)
fit_option
summary(fit_option)
?sampling
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = T)
ms = rstan::extract(fit)
ms$b
quantile(ms$b, prob=c(0.025, 0.975)
quantile(ms$b, prob=c(0.025, 0.975))
quantile(ms$b, prob=c(0.025, 0.975))
salary <- read.csv("../code/ch.4/input/data-salary.txt")
dim(ms$b)
d_mcmc = data.frame(a = ms$a, b = ms$b, sigma = ms$sigma)
head(d_mcmc)
View(ms)
X_new = 23:60
data = list = list(N=nrow(salary), X=salary$X, Y=salary$Y, N_new = length(X_new), X_new = X_new)
fit_new = stan(file="./source/model4-4.stan", data=data, seed=1234)
fit_new = stan(file="./model4-4.stan", data=data, seed=1234)
fit_new = stan(file="./model4-4.stan", data=data, seed=1234)
X_new = 23:60
data = list = list(N=nrow(salary), X=salary$X, Y=salary$Y, N_new = length(X_new), X_new = X_new)
fit_new = stan(file="./model4-4.stan", data=data, seed=1234)
ms_new = rstan::extract(fit_new)
return(p)
ggplot.5quantile = function(data) {
p = ggplot(data=data, aes(x=X, y=p50)) +
theme_bw(base_size = 18) +
geom_ribbon(aes(ymin = p2.5, ymax = p97.5), fill = "black", alpha = 1/6) +
geom_ribbon(aes = (ymin = p25, ymax = p75), fill = "black", alpha = 2/6) +
data.frame.quantile.mcmc = function(x, y_mcmc,
prob = c(2.5, 25, 50, 75, 97.5)/100) {
qua = apply(y_mcmc, 2, quantile, probs = probs)
d = data.frame(X=x, t(qua))
colnames(d) = c("X", paste0('p', probs*100))
return(d)
}
ggplot.5quantile = function(data) {
p = ggplot(data=data, aes(x=X, y=p50)) +
theme_bw(base_size = 18) +
geom_ribbon(aes(ymin = p2.5, ymax = p97.5), fill = "black", alpha = 1/6) +
geom_ribbon(aes = (ymin = p25, ymax = p75), fill = "black", alpha = 2/6) +
ggplot.5quantile = function(data) {
p = ggplot(data=data, aes(x=X, y=p50)) +
theme_bw(base_size = 18) +
geom_ribbon(aes(ymin = p2.5, ymax = p97.5), fill = "black", alpha = 1/6) +
geom_ribbon(aes(ymin = p25, ymax = p75), fill = "black", alpha = 2/6) +
geom_line(size = 1)
return(p)
}
customize.ggplot.axis = function(p){
p = p + labs(x = "X", y = "Y") +
scale_y_continuous(breaks = seq(from = 2000, to = 14000, by = 4000)) +
coord_cartesian(xlim = c(22, 61), ylim = c(2000, 14000))
return(p)
}
X_new = 23:60
data = list = list(N=nrow(salary), X=salary$X, Y=salary$Y, N_new = length(X_new), X_new = X_new)
fit_new = stan(file="./model4-4.stan", data=data, seed=1234)
ms_new = rstan::extract(fit_new)
data.frame.quantile.mcmc = function(x, y_mcmc,
prob = c(2.5, 25, 50, 75, 97.5)/100) {
qua = apply(y_mcmc, 2, quantile, probs = probs)
d = data.frame(X=x, t(qua))
colnames(d) = c("X", paste0('p', probs*100))
return(d)
}
ggplot.5quantile = function(data) {
p = ggplot(data=data, aes(x=X, y=p50)) +
theme_bw(base_size = 18) +
geom_ribbon(aes(ymin = p2.5, ymax = p97.5), fill = "black", alpha = 1/6) +
geom_ribbon(aes(ymin = p25, ymax = p75), fill = "black", alpha = 2/6) +
geom_line(size = 1)
return(p)
}
customize.ggplot.axis = function(p){
p = p + labs(x = "X", y = "Y") +
scale_y_continuous(breaks = seq(from = 2000, to = 14000, by = 4000)) +
coord_cartesian(xlim = c(22, 61), ylim = c(2000, 14000))
return(p)
}
d_est = data.frame.quantile.mcmc(x = X_new, y_mcmc = ms_new$y_base_new)
data.frame.quantile.mcmc = function(x, y_mcmc,
probs = c(2.5, 25, 50, 75, 97.5)/100) {
qua = apply(y_mcmc, 2, quantile, probs = probs)
d = data.frame(X=x, t(qua))
colnames(d) = c("X", paste0('p', probs*100))
return(d)
}
d_est = data.frame.quantile.mcmc(x = X_new, y_mcmc = ms_new$y_base_new)
p = ggplot.5quantile(data=d_est) +
geom_point(data=d, aes(x=X, y=Y), shape = 1, size = 3) +
customize.ggplot.axis(p)
d_est = data.frame.quantile.mcmc(x = X_new, y_mcmc = ms_new$y_base_new)
p = ggplot.5quantile(data=d_est) +
geom_point(data=d, aes(x=X, y=Y), shape = 1, size = 3) +
customize.ggplot.axis(p)
d_est = data.frame.quantile.mcmc(x = X_new, y_mcmc = ms_new$y_base_new)
p = ggplot.5quantile(data=d_est)
p = p + geom_point(data=d, aes(x=X, y=Y), shape = 1, size = 3)
p = p + customize.ggplot.axis(p)
ggsave(file = "./output/fig4-8-left-2.png", plot = p, dpi = 300, w=4, h=3)
dest = data.frame.quantile.mcmc(x = X_new, y_mcmc = ms_new$y_new)
p = ggplot.5quantile(datas=d_est)
d_est = data.frame.quantile.mcmc(x = X_new, y_mcmc = ms_new$y_new)
p = ggplot.5quantile(datas=d_est)
p = ggplot.5quantile(data=d_est)
p = p + geom_point(data=d, aes(x=X, y=Y), shape = 1, size = 3)
p = p + geom_point(data=d_est, aes(x=X, y=Y), shape = 1, size = 3)
p = p + customize.ggplot.axis(p)
p = ggplot.5quantile(data=d_est)
p = p + customize.ggplot.axis(p)
library(tidyverse)
library(here)
library(xaringan)
dir <- here()
# xaringan:::inf_mr()
xaringan:::inf_mr()
mu = rnorm(N, mean = 0, sd = 10^2)
Y = rnorm(N, mean = mu, sd = 1)
set.seed(1234)
N = 20
mu = rnorm(N, mean = 0, sd = 10^2)
Y = rnorm(N, mean = mu, sd = 1)
ggplot() +
geom_histogram(aes(x = Y)) +
ggtitle("histogram of Y")
salary %>% lm(Y~X)
salary <- read.csv(file = here("code/ch.4/input/data-salary.txt"), header = T, sep = ',')
salary <- read.csv(file = here("code/ch.4/input/data-salary.txt"), header = T)
glimpse(salary)
salary %>% lm(Y~X)
lm(Y~X, data = salary)
(res_lm <- lm(Y~X, data = salary))
ggplot(data = salary) +
geom_point(aes(x = X, y = Y)) +
ggtitle("scatter plot for salary data") +
stat_smooth(method = lm, level = 0.95)
ggplot(data = salary) +
geom_point(aes(x = X, y = Y)) +
ggtitle("scatter plot for salary data") +
stat_smooth(method = lm, level = 0.95)
ggplot(data = salary) +
geom_point(aes(x = X, y = Y)) +
ggtitle("scatter plot for salary data") +
stat_smooth(method = lm, level = 0.95)
ggplot(data = salary) +
geom_point(aes(x = X, y = Y)) +
ggtitle("scatter plot for salary data") +
stat_smooth(method = lm, level = 0.95)
ggplot(data = salary) +
geom_point(aes(x = X, y = Y)) +
ggtitle("scatter plot for salary data") +
ggplot(data = salary) +
geom_point(aes(x = X, y = Y)) +
ggtitle("scatter plot for salary data")
ggplot(data = salary) +
geom_point(aes(x = X, y = Y)) +
ggtitle("scatter plot for salary data")
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("scatter plot for salary data") +
```
ggplot(data = salary, aes(X, Y)) +
geom_point() +
ggtitle("scatter plot for salary data") +
```
ggplot(data = salary, aes(X, Y)) +
```
ggplot(data = salary, aes(X, Y)) +
```
ggplot(data = salary, aes(x = X, y = Y)) +
```
ggplot(data = salary, aes(x = X, y = Y))
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point()
geom_point( +
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("scatter plot for salary data")
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("scatter plot for salary data")
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("scatter plot for salary data")
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point +
ggtitle("scatter plot for salary data") +
stat_smooth(method = lm)
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("scatter plot for salary data") +
stat_smooth(method = lm)
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("scatter plot for salary data") +
stat_smooth(method = lm, level = 0.95)
X_new <- data.frame(x = 23:60)
conf_95 <- predict(res_lm, X_new, interval = "confidence", level = 0.95)
conf_95 <- predict(res_lm, X_new, interval = "confidence", level = 0.95)
conf_95 <- predict(res_lm, data = X_new, interval = "confidence", level = 0.95)
pred_95 <- predict(res_lm, data = X_new, interval = "prediction", level = 0.95)
conf_95
cbind(salary, conf_95)
(cbind(salary, conf_95))
(cbind(X_new, conf_95))
plot(conf_95)
X_new
conf_95
?predict
conf_95 <- predict(res_lm, newdata = X_new, interval = "confidence", level = 0.95)
pred_95 <- predict(res_lm, newdata = X_new, interval = "prediction", level = 0.95)
conf_95
?stat_smooth
cbind(X_new, pred_95)
cbind(X_new, pred_95) %>%
ggplot(aes(x = X, y + fit))
cbind(X_new, pred_95) %>%
ggplot(aes(x = X, y = fit))
ggplot(data = salary, aes(x = X, y = fit))
ggplot(data = salary, aes(x = X, y = Y))
+ geom_point()
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point()
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
stat_smooth(method = lm, level = 0.95)
?geom_line
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
geom_line(data = cbind(X_new, pred_95))
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
geom_line(data = cbind(X_new, pred_95), aes(x = X, y = fit))
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
geom_line(data = cbind(X_new, pred_95), aes(x = X, y = fit), color = red)
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
geom_line(data = cbind(X_new, pred_95), aes(x = X, y = fit), color = 'red')
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
geom_line(data = cbind(X_new, pred_95), aes(x = X, y = fit), color = 'blue')
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
geom_line(data = cbind(X_new, pred_95), aes(x = X, y = fit), color = 'blue') +
geom_line(data = cbind(X_new, pred_95), aes(x = X, y = lwr), color = 'red', linetype = "dashed")
(new_data <- cbind(X_new, pred_95))
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
geom_line(data = new_data, aes(x = X, y = fit), color = 'blue') +
geom_line(data = new_data, aes(x = X, y = lwr), color = 'red', linetype = "dashed") +
geom_line(data = new_data, aes(x = X, y = upr), color = 'red', linetype = "dashed")
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
stat_smooth(method = lm, level = 0.95)
ggplot(data = salary, aes(x = X, y = Y)) +
geom_point() +
ggtitle("Confidence Interval for salary data") +
stat_smooth(method = lm, level = 0.95) +
geom_line(data = new_data, aes(x = X, y = lwr), color = 'red', linetype = "dashed") +
geom_line(data = new_data, aes(x = X, y = upr), color = 'red', linetype = "dashed")
model4_5<- 'data {
model4_5<- 'data {
int N;
library(tidyverse)
library(here)
library(xaringan)
library(rstan)
# xaringan:::inf_mr()
here()
salary <- read.csv(file = here("code/ch.4/input/data-salary.txt"), header = T)
glimpse(salary)
(res_lm <- lm(Y~X, data = salary))
data {
int N;
real X[N];
real Y[N];
}
parameters {
real a;
real b;
real<lower=0> sigma;
}
model {
for (n in 1:N){
Y[n] ~ normal(a+b*X[n], sigma);
}
}
data {
int N;
real X[N];
real Y[N];
}
library(parallel)
options(mc.cores = parallel::detectCores() - 1)
load("~/GitHub/study_rstan/output/chpt_4_new.result-model-4-5-rmd.Rdata")
View(fit_rmd)
fit_rmd
load("~/GitHub/study_rstan/output/chpt_4_new.result-model-4-5-rmd.Rdata")
load("~/GitHub/study_rstan/output/chpt_4_new.result-model-4-5.Rdata")
View(fit)
fit
