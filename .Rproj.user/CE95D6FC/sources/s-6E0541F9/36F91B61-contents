---
title: "Chapter 4"
output: html_document
number_sections: true
toc: true
editor_options:
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, tidy=T)
```

```{r}
library(tidyverse)
library(ggplot2)
library(rstan)
library(ggmcmc)
```


## simple regression
```{r}
salary <- read.csv("../code/ch.4/input/data-salary.txt")
```

```{r}
plot(salary)
```
```{r}
salary %>% ggplot(aes(x=X, y=Y)) + geom_point()
```

### model equation
- standard
$$\begin{eqnarray}
Y[n] & = & \mathcal{y}_{base}[n] + \varepsilon [n] \qquad & n = 1,2, \cdots , N \\
\mathcal{y}_{base}[n] &=& a + b X[n] \quad \quad & n = 1,2, \cdots , N\\
\varepsilon [n] &\sim& Normal(0, \sigma) \qquad & n = 1,2, \cdots , N
\end{eqnarray}$$

- simple
$$\begin{eqnarray}
\mathcal{y}_{base}[n] & = & a + b X[n] \quad \quad & n = 1,2, \cdots , N\\
Y [n] &\sim& Normal(\mathcal{y}_{base}[n], \sigma) \qquad & n = 1,2, \cdots , N
\end{eqnarray}$$

$$\begin{eqnarray}
\mathcal{y}_{base}[n] &=& a + b X[n] \quad \quad & n = 1,2, \cdots , N\\
Y [n] &\sim& Normal(\mathcal{y}_{base}[n], \sigma) \qquad & n = 1,2, \cdots , N
\end{eqnarray}$$

$$\begin{eqnarray}
Y[n] &\sim& Normal(\mathcal{y}_{base}[n], \sigma) \qquad & n = 1,2, \cdots , N
\end{eqnarray}$$


```{r}
res_lm = lm(Y~X, data=salary)
res_lm
```

```{r}
data = list(N = nrow(salary), X = salary$X, Y = salary$Y)
fit = stan(file = "../source/model4-5.stan", data=data, seed=1234)
```

```{r}
fit
```


```{r}
ggmcmc(ggs(fit, inc_warmup = T, stan_include_auxiliar = T),
       file = "../output/fit-traceplot.pdf", plot='traceplot')

ggmcmc(ggs(fit), file = "../output/fit-ggmcmc.pdf")
```

## option in MCMC

```{r}
stanmodel = stan_model(file="./model4-5.stan")

fit_option = sampling(
  stanmodel, 
  data = data,
  pars = c("b", "sigma"),
  init = function(){
    list(a = runif(1, -10, 10),
         b = runif(1, 0, 10), 
         sigma = 10)
  },
  seed = 123,
  chains = 3, iter = 1000, warmup = 200, thin = 2
)

summary(fit_option)
?sampling
```

## to compute the chain with multi-cores
  - if use this option, fixing a bug is more difficult. After check the computation have no error, use it.
```{r}
rstan_options(auto_write = T)
options(mc.cores = parallel::detectCores())
```
  
```{r}
ms = rstan::extract(fit)
dim(ms$b)
quantile(ms$b, prob=c(0.025, 0.975))
```

```{r}
d_mcmc = data.frame(a = ms$a, b = ms$b, sigma = ms$sigma)
head(d_mcmc)
```

  